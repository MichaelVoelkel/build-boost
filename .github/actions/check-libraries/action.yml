name: Check that Boost libraries were built
description: Check that Boost libraries were built
inputs:
  librarydir:
    description: Directory with the library files
    required: true
  libraries:
    description: Libraries to check
    required: true
  toolset:
    description: Toolset used
    required: false
    default: auto
  static:
    description: Look for static libraries
    required: false
    default: 0
runs:
  using: composite
  steps:
    - run: |
        New-Variable os -Value '${{ runner.os }}' -Option Constant
        New-Variable windows_host -Value ($os -eq 'Windows') -Option Constant

        New-Variable librarydir -Value '${{ inputs.librarydir }}' -Option Constant
        New-Variable toolset -Value '${{ inputs.toolset }}' -Option Constant
        New-Variable static -Value ('${{ inputs.static }}' -eq '1') -Option Constant

        dir $librarydir

        if ($static) {
            $prefix = 'lib'
            $ext = '.a'
            if ($windows_host -and $toolset -in @('auto', 'clang', 'msvc')) {
                $ext = '.lib'
            }
        } else {
            $prefix = 'lib'
            if ($windows_host -and $toolset -in @('auto', 'clang', 'msvc')) {
                $prefix = ''
            }
            $ext = '.so'
            if ($windows_host) {
                $ext = '.dll'
            }
        }

        $expected = '${{ inputs.libraries }}'
        $expected = $expected.Split(' ', [System.StringSplitOptions]::RemoveEmptyEntries)
        $expected = $expected | %{"${prefix}boost_$_$ext"}

        foreach ($lib in $expected) {
            $path = Join-Path $librarydir $lib
            $(Test-Path $path -Type Leaf) -or $(throw "Couldn't find Boost library at: $path")
        }
      shell: pwsh
